name: Release lib-ml Package

on:
  push:
    branches:
      - razvan-w9
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'        # stable tags

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    # 1) Checkout full history and persist creds for git push
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: true

    # 2) Determine if this is a tag or a main-branch push, and grab VERSION
    - name: Prep event & version
      id: prep
      run: |
        if [[ "$GITHUB_REF" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          echo "EVENT=tag"      >> $GITHUB_ENV
          VER="${GITHUB_REF#refs/tags/v}"
        else
          echo "EVENT=branch"   >> $GITHUB_ENV
          VER=$(python -c "import lib_ml.version as v; print(v.__version__)")
        fi
        echo "VERSION=$VER"     >> $GITHUB_ENV

    # 3) Sync lib_ml/version.py (for tag events only – otherwise we'll overwrite in bump step)
    - name: Inject version from tag into version.py
      if: env.EVENT == 'tag'
      run: |
        echo "__version__ = '$VERSION'" > lib_ml/version.py

    # 4) Set up Python & build tools
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install build deps
      run: python -m pip install --upgrade pip setuptools wheel twine

    # 5) Build your distributions
    - name: Build distributions
      run: python setup.py sdist bdist_wheel

    # 6) Create or update GitHub Release for THIS tag (stable or prerelease)
    - name: Publish GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name:       ${{ github.ref_name }}
        prerelease: ${{ contains(github.ref_name, '-pre') }}
        body: |
          Python package **lib-ml** version **${{ env.VERSION }}** published!

          Install with:

          ```bash
          pip install --extra-index-url https://pkg.github.com/${{ github.repository_owner }} lib-ml==${{ env.VERSION }}
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Only run on tag events:
      if: startsWith(github.ref, 'refs/tags/')

    # 7) Compute the NEXT prerelease version
    - name: Compute next pre-release
      id: bump
      run: |
        if [[ "$EVENT" == "tag" && ! "$VERSION" =~ -pre ]]; then
          # Stable tag → bump patch & start pre.1
          IFS='.' read MAJ MIN PATCH <<< "$VERSION"
          NEXT="${MAJ}.${MIN}.$((PATCH+1))-pre.1"
        else
          # Already a prerelease → bump counter
          if [[ "$VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-pre\.([0-9]+)$ ]]; then
            BASE="${BASH_REMATCH[1]}-pre"
            COUNT="${BASH_REMATCH[2]}"
            NEXT="${BASE}.$((COUNT+1))"
          else
            echo "ERROR: VERSION ($VERSION) is not a prerelease" >&2
            exit 1
          fi
        fi
        echo "NEXT=$NEXT" >> $GITHUB_ENV
        echo "Computed next: $NEXT"

    # 8) Ensure we’re on the branch that triggered this run
    - name: Checkout triggering branch
      run: |
        if [ "$EVENT" == "branch" ]; then
          # We already checked out $GITHUB_REF (main or feature)
          echo "On branch, no change."
        else
          # We were on a tag → check out main to commit bump
          git fetch origin main:main
          git checkout main
        fi

    # 9) Update version.py, commit & push bump back to the branch
    - name: Bump version.py & push
      run: |
        echo "__version__ = '$NEXT'" > lib_ml/version.py
        git config user.name  "github-actions"
        git config user.email "github-actions@github.com"
        git add lib_ml/version.py
        git commit -m "chore: bump to $NEXT"
        # Push back to whichever branch triggered this job
        BR=${GITHUB_REF#refs/heads/}
        git push origin HEAD:$BR

    # 10) Tag the new prerelease and push the tag
    - name: Tag next pre-release & push
      run: |
        git tag "v$NEXT"
        git push origin "v$NEXT"
